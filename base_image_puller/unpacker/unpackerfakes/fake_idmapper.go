// Code generated by counterfeiter. DO NOT EDIT.
package unpackerfakes

import (
	"sync"

	"code.cloudfoundry.org/lager"
	"github.com/SUSE/groot-btrfs/base_image_puller/unpacker"
	"github.com/SUSE/groot-btrfs/groot"
)

type FakeIDMapper struct {
	MapUIDsStub        func(logger lager.Logger, pid int, mappings []groot.IDMappingSpec) error
	mapUIDsMutex       sync.RWMutex
	mapUIDsArgsForCall []struct {
		logger   lager.Logger
		pid      int
		mappings []groot.IDMappingSpec
	}
	mapUIDsReturns struct {
		result1 error
	}
	mapUIDsReturnsOnCall map[int]struct {
		result1 error
	}
	MapGIDsStub        func(logger lager.Logger, pid int, mappings []groot.IDMappingSpec) error
	mapGIDsMutex       sync.RWMutex
	mapGIDsArgsForCall []struct {
		logger   lager.Logger
		pid      int
		mappings []groot.IDMappingSpec
	}
	mapGIDsReturns struct {
		result1 error
	}
	mapGIDsReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIDMapper) MapUIDs(logger lager.Logger, pid int, mappings []groot.IDMappingSpec) error {
	var mappingsCopy []groot.IDMappingSpec
	if mappings != nil {
		mappingsCopy = make([]groot.IDMappingSpec, len(mappings))
		copy(mappingsCopy, mappings)
	}
	fake.mapUIDsMutex.Lock()
	ret, specificReturn := fake.mapUIDsReturnsOnCall[len(fake.mapUIDsArgsForCall)]
	fake.mapUIDsArgsForCall = append(fake.mapUIDsArgsForCall, struct {
		logger   lager.Logger
		pid      int
		mappings []groot.IDMappingSpec
	}{logger, pid, mappingsCopy})
	fake.recordInvocation("MapUIDs", []interface{}{logger, pid, mappingsCopy})
	fake.mapUIDsMutex.Unlock()
	if fake.MapUIDsStub != nil {
		return fake.MapUIDsStub(logger, pid, mappings)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.mapUIDsReturns.result1
}

func (fake *FakeIDMapper) MapUIDsCallCount() int {
	fake.mapUIDsMutex.RLock()
	defer fake.mapUIDsMutex.RUnlock()
	return len(fake.mapUIDsArgsForCall)
}

func (fake *FakeIDMapper) MapUIDsArgsForCall(i int) (lager.Logger, int, []groot.IDMappingSpec) {
	fake.mapUIDsMutex.RLock()
	defer fake.mapUIDsMutex.RUnlock()
	return fake.mapUIDsArgsForCall[i].logger, fake.mapUIDsArgsForCall[i].pid, fake.mapUIDsArgsForCall[i].mappings
}

func (fake *FakeIDMapper) MapUIDsReturns(result1 error) {
	fake.MapUIDsStub = nil
	fake.mapUIDsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIDMapper) MapUIDsReturnsOnCall(i int, result1 error) {
	fake.MapUIDsStub = nil
	if fake.mapUIDsReturnsOnCall == nil {
		fake.mapUIDsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.mapUIDsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIDMapper) MapGIDs(logger lager.Logger, pid int, mappings []groot.IDMappingSpec) error {
	var mappingsCopy []groot.IDMappingSpec
	if mappings != nil {
		mappingsCopy = make([]groot.IDMappingSpec, len(mappings))
		copy(mappingsCopy, mappings)
	}
	fake.mapGIDsMutex.Lock()
	ret, specificReturn := fake.mapGIDsReturnsOnCall[len(fake.mapGIDsArgsForCall)]
	fake.mapGIDsArgsForCall = append(fake.mapGIDsArgsForCall, struct {
		logger   lager.Logger
		pid      int
		mappings []groot.IDMappingSpec
	}{logger, pid, mappingsCopy})
	fake.recordInvocation("MapGIDs", []interface{}{logger, pid, mappingsCopy})
	fake.mapGIDsMutex.Unlock()
	if fake.MapGIDsStub != nil {
		return fake.MapGIDsStub(logger, pid, mappings)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.mapGIDsReturns.result1
}

func (fake *FakeIDMapper) MapGIDsCallCount() int {
	fake.mapGIDsMutex.RLock()
	defer fake.mapGIDsMutex.RUnlock()
	return len(fake.mapGIDsArgsForCall)
}

func (fake *FakeIDMapper) MapGIDsArgsForCall(i int) (lager.Logger, int, []groot.IDMappingSpec) {
	fake.mapGIDsMutex.RLock()
	defer fake.mapGIDsMutex.RUnlock()
	return fake.mapGIDsArgsForCall[i].logger, fake.mapGIDsArgsForCall[i].pid, fake.mapGIDsArgsForCall[i].mappings
}

func (fake *FakeIDMapper) MapGIDsReturns(result1 error) {
	fake.MapGIDsStub = nil
	fake.mapGIDsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIDMapper) MapGIDsReturnsOnCall(i int, result1 error) {
	fake.MapGIDsStub = nil
	if fake.mapGIDsReturnsOnCall == nil {
		fake.mapGIDsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.mapGIDsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIDMapper) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.mapUIDsMutex.RLock()
	defer fake.mapUIDsMutex.RUnlock()
	fake.mapGIDsMutex.RLock()
	defer fake.mapGIDsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeIDMapper) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ unpacker.IDMapper = new(FakeIDMapper)

// Code generated by counterfeiter. DO NOT EDIT.
package base_image_pullerfakes

import (
	"sync"

	"github.com/SUSE/groot-btrfs/base_image_puller"
)

type FakeDependencyRegisterer struct {
	RegisterStub        func(id string, chainIDs []string) error
	registerMutex       sync.RWMutex
	registerArgsForCall []struct {
		id       string
		chainIDs []string
	}
	registerReturns struct {
		result1 error
	}
	registerReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDependencyRegisterer) Register(id string, chainIDs []string) error {
	var chainIDsCopy []string
	if chainIDs != nil {
		chainIDsCopy = make([]string, len(chainIDs))
		copy(chainIDsCopy, chainIDs)
	}
	fake.registerMutex.Lock()
	ret, specificReturn := fake.registerReturnsOnCall[len(fake.registerArgsForCall)]
	fake.registerArgsForCall = append(fake.registerArgsForCall, struct {
		id       string
		chainIDs []string
	}{id, chainIDsCopy})
	fake.recordInvocation("Register", []interface{}{id, chainIDsCopy})
	fake.registerMutex.Unlock()
	if fake.RegisterStub != nil {
		return fake.RegisterStub(id, chainIDs)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.registerReturns.result1
}

func (fake *FakeDependencyRegisterer) RegisterCallCount() int {
	fake.registerMutex.RLock()
	defer fake.registerMutex.RUnlock()
	return len(fake.registerArgsForCall)
}

func (fake *FakeDependencyRegisterer) RegisterArgsForCall(i int) (string, []string) {
	fake.registerMutex.RLock()
	defer fake.registerMutex.RUnlock()
	return fake.registerArgsForCall[i].id, fake.registerArgsForCall[i].chainIDs
}

func (fake *FakeDependencyRegisterer) RegisterReturns(result1 error) {
	fake.RegisterStub = nil
	fake.registerReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDependencyRegisterer) RegisterReturnsOnCall(i int, result1 error) {
	fake.RegisterStub = nil
	if fake.registerReturnsOnCall == nil {
		fake.registerReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.registerReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDependencyRegisterer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.registerMutex.RLock()
	defer fake.registerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDependencyRegisterer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ base_image_puller.DependencyRegisterer = new(FakeDependencyRegisterer)

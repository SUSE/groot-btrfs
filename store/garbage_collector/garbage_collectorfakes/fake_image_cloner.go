// Code generated by counterfeiter. DO NOT EDIT.
package garbage_collectorfakes

import (
	"sync"

	"code.cloudfoundry.org/lager"
	"github.com/SUSE/groot-btrfs/store/garbage_collector"
)

type FakeImageCloner struct {
	ImageIDsStub        func(logger lager.Logger) ([]string, error)
	imageIDsMutex       sync.RWMutex
	imageIDsArgsForCall []struct {
		logger lager.Logger
	}
	imageIDsReturns struct {
		result1 []string
		result2 error
	}
	imageIDsReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeImageCloner) ImageIDs(logger lager.Logger) ([]string, error) {
	fake.imageIDsMutex.Lock()
	ret, specificReturn := fake.imageIDsReturnsOnCall[len(fake.imageIDsArgsForCall)]
	fake.imageIDsArgsForCall = append(fake.imageIDsArgsForCall, struct {
		logger lager.Logger
	}{logger})
	fake.recordInvocation("ImageIDs", []interface{}{logger})
	fake.imageIDsMutex.Unlock()
	if fake.ImageIDsStub != nil {
		return fake.ImageIDsStub(logger)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.imageIDsReturns.result1, fake.imageIDsReturns.result2
}

func (fake *FakeImageCloner) ImageIDsCallCount() int {
	fake.imageIDsMutex.RLock()
	defer fake.imageIDsMutex.RUnlock()
	return len(fake.imageIDsArgsForCall)
}

func (fake *FakeImageCloner) ImageIDsArgsForCall(i int) lager.Logger {
	fake.imageIDsMutex.RLock()
	defer fake.imageIDsMutex.RUnlock()
	return fake.imageIDsArgsForCall[i].logger
}

func (fake *FakeImageCloner) ImageIDsReturns(result1 []string, result2 error) {
	fake.ImageIDsStub = nil
	fake.imageIDsReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeImageCloner) ImageIDsReturnsOnCall(i int, result1 []string, result2 error) {
	fake.ImageIDsStub = nil
	if fake.imageIDsReturnsOnCall == nil {
		fake.imageIDsReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.imageIDsReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeImageCloner) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.imageIDsMutex.RLock()
	defer fake.imageIDsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeImageCloner) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ garbage_collector.ImageCloner = new(FakeImageCloner)

// Code generated by counterfeiter. DO NOT EDIT.
package storefakes

import (
	"sync"

	"code.cloudfoundry.org/lager"
	"github.com/SUSE/groot-btrfs/store"
)

type FakeVolumeDriver struct {
	VolumesStub        func(logger lager.Logger) ([]string, error)
	volumesMutex       sync.RWMutex
	volumesArgsForCall []struct {
		logger lager.Logger
	}
	volumesReturns struct {
		result1 []string
		result2 error
	}
	volumesReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	VolumeSizeStub        func(lager.Logger, string) (int64, error)
	volumeSizeMutex       sync.RWMutex
	volumeSizeArgsForCall []struct {
		arg1 lager.Logger
		arg2 string
	}
	volumeSizeReturns struct {
		result1 int64
		result2 error
	}
	volumeSizeReturnsOnCall map[int]struct {
		result1 int64
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeVolumeDriver) Volumes(logger lager.Logger) ([]string, error) {
	fake.volumesMutex.Lock()
	ret, specificReturn := fake.volumesReturnsOnCall[len(fake.volumesArgsForCall)]
	fake.volumesArgsForCall = append(fake.volumesArgsForCall, struct {
		logger lager.Logger
	}{logger})
	fake.recordInvocation("Volumes", []interface{}{logger})
	fake.volumesMutex.Unlock()
	if fake.VolumesStub != nil {
		return fake.VolumesStub(logger)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.volumesReturns.result1, fake.volumesReturns.result2
}

func (fake *FakeVolumeDriver) VolumesCallCount() int {
	fake.volumesMutex.RLock()
	defer fake.volumesMutex.RUnlock()
	return len(fake.volumesArgsForCall)
}

func (fake *FakeVolumeDriver) VolumesArgsForCall(i int) lager.Logger {
	fake.volumesMutex.RLock()
	defer fake.volumesMutex.RUnlock()
	return fake.volumesArgsForCall[i].logger
}

func (fake *FakeVolumeDriver) VolumesReturns(result1 []string, result2 error) {
	fake.VolumesStub = nil
	fake.volumesReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeVolumeDriver) VolumesReturnsOnCall(i int, result1 []string, result2 error) {
	fake.VolumesStub = nil
	if fake.volumesReturnsOnCall == nil {
		fake.volumesReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.volumesReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeVolumeDriver) VolumeSize(arg1 lager.Logger, arg2 string) (int64, error) {
	fake.volumeSizeMutex.Lock()
	ret, specificReturn := fake.volumeSizeReturnsOnCall[len(fake.volumeSizeArgsForCall)]
	fake.volumeSizeArgsForCall = append(fake.volumeSizeArgsForCall, struct {
		arg1 lager.Logger
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("VolumeSize", []interface{}{arg1, arg2})
	fake.volumeSizeMutex.Unlock()
	if fake.VolumeSizeStub != nil {
		return fake.VolumeSizeStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.volumeSizeReturns.result1, fake.volumeSizeReturns.result2
}

func (fake *FakeVolumeDriver) VolumeSizeCallCount() int {
	fake.volumeSizeMutex.RLock()
	defer fake.volumeSizeMutex.RUnlock()
	return len(fake.volumeSizeArgsForCall)
}

func (fake *FakeVolumeDriver) VolumeSizeArgsForCall(i int) (lager.Logger, string) {
	fake.volumeSizeMutex.RLock()
	defer fake.volumeSizeMutex.RUnlock()
	return fake.volumeSizeArgsForCall[i].arg1, fake.volumeSizeArgsForCall[i].arg2
}

func (fake *FakeVolumeDriver) VolumeSizeReturns(result1 int64, result2 error) {
	fake.VolumeSizeStub = nil
	fake.volumeSizeReturns = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeVolumeDriver) VolumeSizeReturnsOnCall(i int, result1 int64, result2 error) {
	fake.VolumeSizeStub = nil
	if fake.volumeSizeReturnsOnCall == nil {
		fake.volumeSizeReturnsOnCall = make(map[int]struct {
			result1 int64
			result2 error
		})
	}
	fake.volumeSizeReturnsOnCall[i] = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeVolumeDriver) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.volumesMutex.RLock()
	defer fake.volumesMutex.RUnlock()
	fake.volumeSizeMutex.RLock()
	defer fake.volumeSizeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeVolumeDriver) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ store.VolumeDriver = new(FakeVolumeDriver)

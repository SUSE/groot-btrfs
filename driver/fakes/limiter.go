// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"code.cloudfoundry.org/groot-windows/driver"
)

type Limiter struct {
	SetQuotaStub        func(string, uint64) error
	setQuotaMutex       sync.RWMutex
	setQuotaArgsForCall []struct {
		arg1 string
		arg2 uint64
	}
	setQuotaReturns struct {
		result1 error
	}
	setQuotaReturnsOnCall map[int]struct {
		result1 error
	}
	GetQuotaUsedStub        func(string) (uint64, error)
	getQuotaUsedMutex       sync.RWMutex
	getQuotaUsedArgsForCall []struct {
		arg1 string
	}
	getQuotaUsedReturns struct {
		result1 uint64
		result2 error
	}
	getQuotaUsedReturnsOnCall map[int]struct {
		result1 uint64
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Limiter) SetQuota(arg1 string, arg2 uint64) error {
	fake.setQuotaMutex.Lock()
	ret, specificReturn := fake.setQuotaReturnsOnCall[len(fake.setQuotaArgsForCall)]
	fake.setQuotaArgsForCall = append(fake.setQuotaArgsForCall, struct {
		arg1 string
		arg2 uint64
	}{arg1, arg2})
	fake.recordInvocation("SetQuota", []interface{}{arg1, arg2})
	fake.setQuotaMutex.Unlock()
	if fake.SetQuotaStub != nil {
		return fake.SetQuotaStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.setQuotaReturns.result1
}

func (fake *Limiter) SetQuotaCallCount() int {
	fake.setQuotaMutex.RLock()
	defer fake.setQuotaMutex.RUnlock()
	return len(fake.setQuotaArgsForCall)
}

func (fake *Limiter) SetQuotaArgsForCall(i int) (string, uint64) {
	fake.setQuotaMutex.RLock()
	defer fake.setQuotaMutex.RUnlock()
	return fake.setQuotaArgsForCall[i].arg1, fake.setQuotaArgsForCall[i].arg2
}

func (fake *Limiter) SetQuotaReturns(result1 error) {
	fake.SetQuotaStub = nil
	fake.setQuotaReturns = struct {
		result1 error
	}{result1}
}

func (fake *Limiter) SetQuotaReturnsOnCall(i int, result1 error) {
	fake.SetQuotaStub = nil
	if fake.setQuotaReturnsOnCall == nil {
		fake.setQuotaReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setQuotaReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Limiter) GetQuotaUsed(arg1 string) (uint64, error) {
	fake.getQuotaUsedMutex.Lock()
	ret, specificReturn := fake.getQuotaUsedReturnsOnCall[len(fake.getQuotaUsedArgsForCall)]
	fake.getQuotaUsedArgsForCall = append(fake.getQuotaUsedArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetQuotaUsed", []interface{}{arg1})
	fake.getQuotaUsedMutex.Unlock()
	if fake.GetQuotaUsedStub != nil {
		return fake.GetQuotaUsedStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getQuotaUsedReturns.result1, fake.getQuotaUsedReturns.result2
}

func (fake *Limiter) GetQuotaUsedCallCount() int {
	fake.getQuotaUsedMutex.RLock()
	defer fake.getQuotaUsedMutex.RUnlock()
	return len(fake.getQuotaUsedArgsForCall)
}

func (fake *Limiter) GetQuotaUsedArgsForCall(i int) string {
	fake.getQuotaUsedMutex.RLock()
	defer fake.getQuotaUsedMutex.RUnlock()
	return fake.getQuotaUsedArgsForCall[i].arg1
}

func (fake *Limiter) GetQuotaUsedReturns(result1 uint64, result2 error) {
	fake.GetQuotaUsedStub = nil
	fake.getQuotaUsedReturns = struct {
		result1 uint64
		result2 error
	}{result1, result2}
}

func (fake *Limiter) GetQuotaUsedReturnsOnCall(i int, result1 uint64, result2 error) {
	fake.GetQuotaUsedStub = nil
	if fake.getQuotaUsedReturnsOnCall == nil {
		fake.getQuotaUsedReturnsOnCall = make(map[int]struct {
			result1 uint64
			result2 error
		})
	}
	fake.getQuotaUsedReturnsOnCall[i] = struct {
		result1 uint64
		result2 error
	}{result1, result2}
}

func (fake *Limiter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.setQuotaMutex.RLock()
	defer fake.setQuotaMutex.RUnlock()
	fake.getQuotaUsedMutex.RLock()
	defer fake.getQuotaUsedMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Limiter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ driver.Limiter = new(Limiter)
